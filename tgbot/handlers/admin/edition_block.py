from typing import Literal

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import F, Router

from create_bot import bot
from .filters import AdminFilter
from tgbot.misc.states import AdminFSM
from tgbot.models.redis_connector import RedisConnector
from .inline import AdminEditionBlockInline

router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())


def get_coin_value(coin: dict, key: Literal["sell_price", "wallet"]) -> int | str:
    try:
        return coin[key]
    except KeyError:
        if key == "wallet":
            return ""
        else:
            return 0


async def row_parser(message: Message, key: Literal["sell_price", "wallet"], state: FSMContext) -> dict:
    rows = message.text.split("\n")
    for row in rows:
        try:
            coin = row.split("|")[0].strip()
            value = row.split("|")[1].strip()
            if key != "wallet":
                value = float(value.replace(",", "."))
            data = {"title": coin, key: value}
        except ValueError:
            return
        if data:
            await RedisConnector.update_coins_list(data)
    text = "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
    await message.answer(text)
    coins = await RedisConnector.get_coins_list()
    text = []
    for coin in coins:
        price = get_coin_value(coin=coin, key=key)
        row = f"{coin['title']} | {price}"
        text.append(row)
    kb = AdminEditionBlockInline.home_kb()
    await state.set_state(AdminFSM.home)
    await message.answer("\n".join(text), reply_markup=kb)


@router.callback_query(F.data.split(":")[0] == "edit")
async def edition_block(callback: CallbackQuery, state: FSMContext):
    clb_data = callback.data.split(":")[1]
    if clb_data == "coins":
        text = "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?"
        kb = AdminEditionBlockInline.edition_menu_kb()
    elif clb_data == "price":
        text = "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã <u>–ø–æ–∫—É–ø–∞–µ—Ç–µ</u> –≤–∞–ª—é—Ç—É —É –∫–ª–∏–µ–Ω—Ç–æ–≤. –î–ª—è USDT —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö –∑–∞ " \
               "–ø–æ–∫—É–ø–∫—É, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç —É–∫–∞–∑–∞–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö üëá. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –æ–¥–Ω—É –∏–ª–∏ " \
               "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –±–æ—Ç—É"
        await callback.message.answer(text)
        coins = await RedisConnector.get_coins_list()
        text = []
        for coin in coins:
            price = get_coin_value(coin=coin, key="sell_price")
            row = f"{coin['title']} | {price}"
            text.append(row)
        text = "\n".join(text)
        kb = AdminEditionBlockInline.home_kb()
        await state.set_state(AdminFSM.get_price)
    elif clb_data == "wallet":
        text = "–¢–µ–∫—É—â–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –æ–¥–Ω—É –∏–ª–∏ " \
               "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –±–æ—Ç—É"
        await callback.message.answer(text)
        coins = await RedisConnector.get_coins_list()
        text = []
        for coin in coins:
            wallet = get_coin_value(coin=coin, key="wallet")
            row = f"{coin['title']} | {wallet}"
            text.append(row)
        text = "\n".join(text)
        kb = AdminEditionBlockInline.home_kb()
        await state.set_state(AdminFSM.get_wallet)
    else:
        return
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.message(F.text, AdminFSM.get_price)
async def get_price(message: Message, state: FSMContext):
    await row_parser(message=message, key="sell_price", state=state)


@router.message(F.text, AdminFSM.get_wallet)
async def get_wallet(message: Message, state: FSMContext):
    await row_parser(message=message, key="wallet", state=state)
